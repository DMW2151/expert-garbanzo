worker_processes  5;  ## Default: 1
worker_rlimit_nofile 8192;


events {
  worker_connections  1024; ## Default: 1024
}

http {
	
	map $http_upgrade $connection_upgrade {
    		default upgrade;
    		''      close;
	}

	access_log  /var/log/nginx/access.log;

	server {
	    listen 80 default_server;
	    server_name maphub.dev;

	    # Tell all requests to port 80 to be 302 redirected to HTTPS
	    return 302 https://$host$request_uri;		
	}

	# HTTPS server to handle JupyterHub
	server {
	    listen 443 ssl http2;
	    server_name maphub.dev; 
        root /var/www/html/hslweb;

        error_page 401 403 404 /404.html;

		# Compresion
		gzip on;
		gzip_types text/plain application/xml application/x-protobuf;
		gzip_proxied no-cache no-store private expired auth;

		# SSL
	    ssl_certificate /etc/letsencrypt/live/maphub.dev/fullchain.pem;
	    ssl_certificate_key /etc/letsencrypt/live/maphub.dev/privkey.pem;

	    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	    ssl_prefer_server_ciphers on;
	    ssl_dhparam /etc/ssl/certs/dhparam.pem;
	    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
	    ssl_session_timeout 1d;
	    ssl_session_cache shared:SSL:50m;
	    ssl_stapling on;
	    ssl_stapling_verify on;
	    add_header Strict-Transport-Security max-age=15768000;
		
		# Managing literal requests to the JupyterHub front end
		# On HTTP 1.1 vs HTTP 2 https://stackoverflow.com/questions/41637076/http2-with-node-js-behind-nginx-proxy
		
		location ~* \.(css|map.css)$ {
			expires 1d;
			default_type text/css;
		}

		location ~* \.(js|js.map)$ {
			expires 1d;
			default_type text/javascript;
		}

	    location /live/ {

			proxy_pass http://127.0.0.1:2152/;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			# websocket headers
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_set_header X-Scheme $scheme;
			
			proxy_buffering off;
		}


		location /tiles/ {

			proxy_pass http://127.0.0.1:2151/;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;	
			proxy_buffering on;
		}

        # location /helsinki/ {
        #     proxy_pass http://127.0.0.1:8080/;   
        # }

        location /_helsinki/ {
            rewrite ^/_helsinki/$ /app/index.html; 
        }

	    # Managing requests to verify letsencrypt host
	    location ~ /.well-known {
			allow all;
	    }
	}
}
